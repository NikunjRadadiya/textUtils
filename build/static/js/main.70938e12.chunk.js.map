{"version":3,"sources":["components/Navbar.jsx","components/TextForm.jsx","components/ThemeChangeCssData.jsx","components/About.jsx","components/Alert.jsx","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","textModeColor","mode","textModeName","navStyleChange","color","backgroundColor","react_default","a","createElement","Fragment","className","style","dist","to","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutText","aria-checked","onClick","toggleMode","concat","htmlFor","defaultProps","TextForm","_useState","useState","brand","model","_useState2","Object","slicedToArray","carDetail","setCarDetail","_useState3","_useState4","text","setText","darkBg","styleChangeMode","heading","value","rows","onChange","event","target","newText","toUpperCase","showAlert","toLowerCase","split","map","el","charAt","slice","join","length","previousDetails","objectSpread","ThemeChangeCssData","WhiteTheme","DarkTheme","border","DBtnTheme","WBtnTheme","About","theme","setTheme","btnTheme","setbtnTheme","_useState5","_useState6","modeName","setModeName","aria-labelledby","data-bs-parent","Alert","alertmsg","role","word","lower","capitilize","msg","App","setMode","alert","setAlert","message","setTimeout","document","body","components_Alert","react_router_dist","exact","path","element","src_components_About","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.70938e12.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  let textModeColor = props.mode === \"dark\" ? \"white\" : \"black\";\r\n  let textModeName = props.mode === \"dark\" ? \"Disable\" : \"Enable\";\r\n  let navdarkbg = props.mode === \"dark\" ? \"gray\" : \"rgb(249, 249, 249)\";\r\n\r\n  let navStyleChange = {\r\n    color: textModeColor,\r\n    backgroundColor: navdarkbg,\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <nav className=\"navbar navbar-expand-lg\" style={navStyleChange}>\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\" style={navStyleChange}>\r\n            {props.title}\r\n          </Link>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link\r\n                  className=\"nav-link active\"\r\n                  aria-current=\"page\"\r\n                  to=\"/\"\r\n                  style={navStyleChange}\r\n                >\r\n                  Home\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\" style={navStyleChange}>\r\n                  {props.aboutText}\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n\r\n            <div className=\"form-check form-switch\">\r\n              <input\r\n                className=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                aria-checked=\"true\"\r\n                id=\"flexSwitchCheckChecked\"\r\n                onClick={props.toggleMode}\r\n              />\r\n              <label\r\n                className={`form-check-label text-${textModeColor}`}\r\n                htmlFor=\"flexSwitchCheckChecked\"\r\n              >\r\n                {textModeName} DarkMode\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string,\r\n  aboutText: PropTypes.string,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Company Name\",\r\n  aboutText: \"About Company\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  // change multiple value in useState\r\n  const [carDetail, setCarDetail] = useState({\r\n    brand: \"Ford\",\r\n    model: \"Mustang\",\r\n    color: \"Red\",\r\n  });\r\n  const carInfo = () => {\r\n    carDetail.brand === \"Ford\"\r\n      ? setCarDetail((previousDetails) => {\r\n          return { ...previousDetails, brand: \"Hundai\" };\r\n        })\r\n      : setCarDetail((previousDetails) => {\r\n          return { ...previousDetails, brand: \"Ford\" };\r\n        });\r\n  };\r\n\r\n  // text change onclick js\r\n  const [text, setText] = useState(\"\");\r\n\r\n  const handleUpClick = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    // text = \"\"\r\n    //   ? props.showAlert(\"Enter Something First\", \"warning\")\r\n    props.showAlert(\"converted to UpperCase\", \"success\");\r\n  };\r\n\r\n  const handleLoClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    // text = \"\"\r\n    //   ? props.showAlert(\"Enter Something First\", \"warning\")\r\n    props.showAlert(\"converted to LowerCase\", \"info\");\r\n  };\r\n\r\n  const handleCpClick = () => {\r\n    let newText = text\r\n      .split(\" \")\r\n      .map((el) => el.charAt(0).toUpperCase() + el.slice(1))\r\n      .join(\" \");\r\n    setText(newText);\r\n    // text = \"\"\r\n    //   ? props.showAlert(\"Enter Something First\", \"warning\")\r\n    props.showAlert(\"converted to Captilize\", \"warning\");\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    let newText = \"\";\r\n    setText(newText);\r\n    // text = \"\"\r\n    //   ? props.showAlert(\"Enter Something First\", \"warning\")\r\n    props.showAlert(\"text cleared\", \"danger\");\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  let darkBg = props.mode === \"dark\" ? \"black\" : \"white\";\r\n  let darkText = props.mode === \"dark\" ? \"white\" : \"black\";\r\n\r\n  // let limebg = props.limeMode === \"lime\" ? \"lime\" : \"white\";\r\n\r\n  let styleChangeMode = {\r\n    color: darkText,\r\n    backgroundColor: darkBg,\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={`my-3 container`} style={styleChangeMode}>\r\n        <h2>{props.heading}</h2>\r\n        <textarea\r\n          className={`form-control`}\r\n          style={styleChangeMode}\r\n          value={text}\r\n          id=\"myBox\"\r\n          rows=\"8\"\r\n          onChange={handleOnChange}\r\n        ></textarea>\r\n        <button className=\"btn btn-primary m-3\" onClick={handleUpClick}>\r\n          Click to Uppercase\r\n        </button>\r\n        <button className=\"btn btn-primary m-3\" onClick={handleLoClick}>\r\n          Click to Lowercase\r\n        </button>\r\n        <button className=\"btn btn-primary m-3\" onClick={handleCpClick}>\r\n          Click to Capitalize\r\n        </button>\r\n        <button className=\"btn btn-primary m-3\" onClick={handleClearClick}>\r\n          Clear\r\n        </button>\r\n\r\n        {/* text summary */}\r\n\r\n        <div className=\"container border border-2\" style={styleChangeMode}>\r\n          <h2>Your Text Summary</h2>\r\n          <p>\r\n            Words : {text.split(\" \").length} Latters: {text.length};\r\n          </p>\r\n          <p>\r\n            Read Time:\r\n            {0.008 * text.split(\" \").length}min.\r\n          </p>\r\n        </div>\r\n\r\n        {/* car change state  */}\r\n\r\n        <div\r\n          className=\"container border border-2 border-warning my-3\"\r\n          style={styleChangeMode}\r\n        >\r\n          <h2>\r\n            I have {carDetail.color} {carDetail.model} of {carDetail.brand}\r\n          </h2>\r\n          <button className=\"btn btn-warning\" onClick={carInfo}>\r\n            Click to Change\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","const ThemeChangeCssData = {\r\n  WhiteTheme: {\r\n    color: \"black\",\r\n    backgroundColor: \"white\",\r\n  },\r\n\r\n  DarkTheme: {\r\n    color: \"white\",\r\n    backgroundColor: \"black\",\r\n    border: \"1px solid rgba(255,255,255,.25)\",\r\n  },\r\n\r\n  DBtnTheme: {\r\n    color: \"white\",\r\n    backgroundColor: \"black\",\r\n  },\r\n\r\n  WBtnTheme: {\r\n    color: \"black\",\r\n    backgroundColor: \"white\",\r\n  },\r\n};\r\n\r\nexport default ThemeChangeCssData;\r\n","import React, { useState } from \"react\";\r\n// import ThemeChangeCss from \"./ThemeChangeCssData\";\r\nimport \"./About.css\";\r\nimport ThemeChangeCssData from \"./ThemeChangeCssData\";\r\n\r\nconst About = () => {\r\n  const { WhiteTheme, DarkTheme, DBtnTheme, WBtnTheme } = ThemeChangeCssData;\r\n  const [theme, setTheme] = useState(WhiteTheme);\r\n  const [btnTheme, setbtnTheme] = useState(DBtnTheme);\r\n  const [modeName, setModeName] = useState(\"Dark\");\r\n\r\n  let ChangeModeClick = () => {\r\n    if (theme === WhiteTheme) {\r\n      setTheme(DarkTheme);\r\n      setModeName(\"Light\");\r\n      setbtnTheme(WBtnTheme);\r\n    } else {\r\n      setTheme(WhiteTheme);\r\n      setModeName(\"Dark\");\r\n      setbtnTheme(DBtnTheme);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container my-4 pb-2 border border-dark\" style={theme}>\r\n      <h2 className=\"my-2\">About Us</h2>\r\n      <div className=\"accordion py-3\" id=\"accordionExample\">\r\n        <div className=\"accordion-item my-2\" style={theme}>\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n              style={theme}\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\">\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees\r\n              control the overall appearance, as well as the showing and hiding\r\n              via CSS transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item my-2\" style={theme}>\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n              style={theme}\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\">\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees\r\n              control the overall appearance, as well as the showing and hiding\r\n              via CSS transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item my-2\" style={theme}>\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n              style={theme}\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\">\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees\r\n              control the overall appearance, as well as the showing and hiding\r\n              via CSS transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button className=\"styleBtn\" style={btnTheme} onClick={ChangeModeClick}>\r\n        {modeName} Mode\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React from \"react\";\r\n\r\nconst Alert = (props) => {\r\n  const capitilize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n\r\n  return (\r\n    props.alertmsg && (\r\n      <>\r\n        <div\r\n          className={`alert alert-${props.alertmsg.type} alert-dismissible fade show`}\r\n          role=\"alert\"\r\n        >\r\n          <strong>{capitilize(props.alertmsg.type)} :</strong>\r\n          {props.alertmsg.msg}\r\n        </div>\r\n      </>\r\n    )\r\n  );\r\n};\r\n\r\nexport default Alert;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm.jsx\";\nimport About from \"./components/About\";\nimport Alert from \"./components/Alert\";\nimport { HashRouter as Router, Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"black\";\n      showAlert(\"Dark mode Enabled\", \"success\");\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Dark mode Disabled\", \"warning\");\n    }\n  };\n\n  return (\n    <>\n      <Router>\n        <Navbar\n          title=\"TextUtiles\"\n          aboutText=\"About_Using_Props\"\n          mode={mode}\n          toggleMode={toggleMode}\n        />\n        <Alert alertmsg={alert} />\n\n        <Routes>\n          <Route\n            exact\n            path=\"/\"\n            element={\n              <TextForm\n                exact\n                showAlert={showAlert}\n                heading=\"Tell me about your self :\"\n                mode={mode}\n              />\n            }\n          ></Route>\n          <Route path=\"/about\" element={<About />}></Route>\n        </Routes>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}